{"ast":null,"code":"export default {\n  data() {\n    return {\n      questions: [],\n      loading: true,\n      index: 0\n    };\n  },\n  computed: {\n    currentQuestion() {\n      if (this.questions !== []) {\n        return this.questions[this.index];\n      }\n      return null;\n    },\n    correctAnswers() {\n      if (this.questions && this.questions.length > 0) {\n        let streakCounter = 0;\n        this.questions.forEach(function (question) {\n          if (!question.rightAnswer) {\n            return;\n          } else if (question.rightAnswer === true) {\n            streakCounter++;\n          }\n        });\n        return streakCounter;\n      } else {\n        return \"--\";\n      }\n    },\n    pluralizeAnswer() {\n      // For grammatical correctness\n      return this.correctAnswers === 1 ? \"Jawaban Benar\" : \"Jawaban Benar\";\n    },\n    quizCompleted() {\n      if (this.questions.length === 0) {\n        return false;\n      }\n      /* Check if all questions have been answered */\n      let questionsAnswered = 0;\n      this.questions.forEach(function (question) {\n        question.rightAnswer !== null ? questionsAnswered++ : null;\n      });\n      return questionsAnswered === this.questions.length;\n    },\n    score() {\n      if (this.questions !== []) {\n        return {\n          allQuestions: this.questions.length,\n          answeredQuestions: this.questions.reduce((count, currentQuestion) => {\n            if (currentQuestion.userAnswer) {\n              // userAnswer is set when user has answered a question, no matter if right or wrong\n              count++;\n            }\n            return count;\n          }, 0),\n          correctlyAnsweredQuestions: this.questions.reduce((count, currentQuestion) => {\n            if (currentQuestion.rightAnswer) {\n              // rightAnswer is true, if user answered correctly\n              count++;\n            }\n            return count;\n          }, 0)\n        };\n      } else {\n        return {\n          allQuestions: 0,\n          answeredQuestions: 0,\n          correctlyAnsweredQuestions: 0\n        };\n      }\n    }\n  },\n  watch: {\n    quizCompleted(completed) {\n      completed && setTimeout(() => {\n        this.$emit(\"quiz-completed\", this.score);\n      }, 3000);\n    }\n  },\n  methods: {\n    async fetchQuestions() {\n      this.loading = true;\n      //fetching questions from api\n      let response = await fetch(\"https://opentdb.com/api.php?amount=3&category=21&type=multiple\");\n      let index = 0; //To identify single answer\n      let data = await response.json();\n      let questions = data.results.map(question => {\n        question.answers = [question.correct_answer, ...question.incorrect_answers];\n        //shuffle above array\n        for (let i = question.answers.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [question.answers[i], question.answers[j]] = [question.answers[j], question.answers[i]];\n        }\n        //add right answers and key\n        question.rightAnswer = null;\n        question.key = index;\n        index++;\n        return question;\n      });\n      this.questions = questions;\n      this.loading = false;\n    },\n    handleClick(e) {\n      let index = e.target.getAttribute(\"index\");\n      let pollutedUserAnswer = e.target.innerHTML; // innerHTML is polluted with decoded HTML entities e.g ' from &#039;\n      /* Clear from pollution with ' */\n      let userAnswer = pollutedUserAnswer.replace(/'/, \"&#039;\");\n      //set answer\n      this.questions[index].userAnswer = userAnswer;\n      /* Set class \"clicked\" on button with userAnswer -> for CSS Styles; Disable other sibling buttons */\n      e.target.classList.add(\"clicked\");\n      let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\n      for (let i = 0; i < allButtons.length; i++) {\n        if (allButtons[i] === e.target) continue;\n        allButtons[i].setAttribute(\"disabled\", \"\");\n      }\n      this.checkCorrectAnswer(e, index);\n    },\n    checkCorrectAnswer(e, index) {\n      let question = this.questions[index];\n      if (question.userAnswer) {\n        if (this.index < this.questions.length - 1) {\n          setTimeout(function () {\n            this.index += 1;\n          }.bind(this), 3000);\n        }\n        if (question.userAnswer === question.correct_answer) {\n          /* Set class on Button if user answered right, to celebrate right answer with animation joyfulButton */\n          e.target.classList.add(\"rightAnswer\");\n          /* Set rightAnswer on question to true, computed property can track a streak out of 20 questions */\n          this.questions[index].rightAnswer = true;\n        } else {\n          /* Mark users answer as wrong answer */\n          e.target.classList.add(\"wrongAnswer\");\n          this.questions[index].rightAnswer = false;\n          /* Show right Answer */\n          let correctAnswer = this.questions[index].correct_answer;\n          let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\n          allButtons.forEach(function (button) {\n            if (button.innerHTML === correctAnswer) {\n              button.classList.add(\"showRightAnswer\");\n            }\n          });\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchQuestions();\n  }\n};","map":{"version":3,"names":["data","questions","loading","index","computed","currentQuestion","correctAnswers","length","streakCounter","forEach","question","rightAnswer","pluralizeAnswer","quizCompleted","questionsAnswered","score","allQuestions","answeredQuestions","reduce","count","userAnswer","correctlyAnsweredQuestions","watch","completed","setTimeout","$emit","methods","fetchQuestions","response","fetch","json","results","map","answers","correct_answer","incorrect_answers","i","j","Math","floor","random","key","handleClick","e","target","getAttribute","pollutedUserAnswer","innerHTML","replace","classList","add","allButtons","document","querySelectorAll","setAttribute","checkCorrectAnswer","bind","correctAnswer","button","mounted"],"sources":["src/components/Quiz.vue"],"sourcesContent":["<template>\r\n    <div class=\"soal-gratis\">\r\n        <div class=\"container\">\r\n            <div class=\"correctAnswers\">\r\n                Kamu Memiliki \r\n                <strong>{{ correctAnswers }} {{ pluralizeAnswer }}!</strong>\r\n                <!-- <strong>{{ correctAnswers }} correct {{ pluralizeAnswer }}!</strong> -->\r\n            </div>\r\n            <!-- <div class=\"correctAnswers\">\r\n                Currently at question {{ index + 1 }} of {{ questions.length }}\r\n            </div> -->\r\n        \r\n            <h1 v-html=\"loading ? 'Loading...' : currentQuestion.question\"></h1>\r\n            <!-- Only first question is displayed -->\r\n            <form v-if=\"currentQuestion\">\r\n                <button\r\n                v-for=\"answer in currentQuestion.answers\"\r\n                :index=\"currentQuestion.key\"\r\n                :key=\"answer\"\r\n                v-html=\"answer\"\r\n                @click.prevent=\"handleClick\"\r\n                ></button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    \r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        questions: [],\r\n        loading: true,\r\n        index: 0,\r\n      };\r\n    },\r\n    computed: {\r\n      currentQuestion() {\r\n        if (this.questions !== []) {\r\n          return this.questions[this.index];\r\n        }\r\n        return null;\r\n      },\r\n      correctAnswers() {\r\n        if (this.questions && this.questions.length > 0) {\r\n          let streakCounter = 0;\r\n          this.questions.forEach(function (question) {\r\n            if (!question.rightAnswer) {\r\n              return;\r\n            } else if (question.rightAnswer === true) {\r\n              streakCounter++;\r\n            }\r\n          });\r\n          return streakCounter;\r\n        } else {\r\n          return \"--\";\r\n        }\r\n      },\r\n      pluralizeAnswer() {\r\n        // For grammatical correctness\r\n        return this.correctAnswers === 1 ? \"Jawaban Benar\" : \"Jawaban Benar\";\r\n      },\r\n      quizCompleted() {\r\n        if (this.questions.length === 0) {\r\n          return false;\r\n        }\r\n        /* Check if all questions have been answered */\r\n        let questionsAnswered = 0;\r\n        this.questions.forEach(function (question) {\r\n          question.rightAnswer !== null ? questionsAnswered++ : null;\r\n        });\r\n        return questionsAnswered === this.questions.length;\r\n      },\r\n      score() {\r\n        if (this.questions !== []) {\r\n          return {\r\n            allQuestions: this.questions.length,\r\n            answeredQuestions: this.questions.reduce((count, currentQuestion) => {\r\n              if (currentQuestion.userAnswer) {\r\n                // userAnswer is set when user has answered a question, no matter if right or wrong\r\n                count++;\r\n              }\r\n              return count;\r\n            }, 0),\r\n            correctlyAnsweredQuestions: this.questions.reduce(\r\n              (count, currentQuestion) => {\r\n                if (currentQuestion.rightAnswer) {\r\n                  // rightAnswer is true, if user answered correctly\r\n                  count++;\r\n                }\r\n                return count;\r\n              },\r\n              0\r\n            ),\r\n          };\r\n        } else {\r\n          return {\r\n            allQuestions: 0,\r\n            answeredQuestions: 0,\r\n            correctlyAnsweredQuestions: 0,\r\n          };\r\n        }\r\n      },\r\n    },\r\n    watch: {\r\n      quizCompleted(completed) {\r\n        completed &&\r\n          setTimeout(() => {\r\n            this.$emit(\"quiz-completed\", this.score);\r\n          }, 3000);\r\n      },\r\n    },\r\n    methods: {\r\n      async fetchQuestions() {\r\n        this.loading = true;\r\n        //fetching questions from api\r\n        let response = await fetch(\r\n          \"https://opentdb.com/api.php?amount=3&category=21&type=multiple\"\r\n        );\r\n        let index = 0; //To identify single answer\r\n        let data = await response.json();\r\n        let questions = data.results.map((question) => {\r\n          question.answers = [\r\n            question.correct_answer,\r\n            ...question.incorrect_answers,\r\n          ];\r\n          //shuffle above array\r\n          for (let i = question.answers.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [question.answers[i], question.answers[j]] = [\r\n              question.answers[j],\r\n              question.answers[i],\r\n            ];\r\n          }\r\n          //add right answers and key\r\n          question.rightAnswer = null;\r\n          question.key = index;\r\n          index++;\r\n          return question;\r\n        });\r\n        this.questions = questions;\r\n        this.loading = false;\r\n      },\r\n  \r\n      handleClick(e) {\r\n        let index = e.target.getAttribute(\"index\");\r\n        let pollutedUserAnswer = e.target.innerHTML; // innerHTML is polluted with decoded HTML entities e.g ' from &#039;\r\n        /* Clear from pollution with ' */\r\n        let userAnswer = pollutedUserAnswer.replace(/'/, \"&#039;\");\r\n        //set answer\r\n        this.questions[index].userAnswer = userAnswer;\r\n        /* Set class \"clicked\" on button with userAnswer -> for CSS Styles; Disable other sibling buttons */\r\n        e.target.classList.add(\"clicked\");\r\n        let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\r\n  \r\n        for (let i = 0; i < allButtons.length; i++) {\r\n          if (allButtons[i] === e.target) continue;\r\n  \r\n          allButtons[i].setAttribute(\"disabled\", \"\");\r\n        }\r\n        this.checkCorrectAnswer(e, index);\r\n      },\r\n  \r\n      checkCorrectAnswer(e, index) {\r\n        let question = this.questions[index];\r\n        if (question.userAnswer) {\r\n          if (this.index < this.questions.length - 1) {\r\n            setTimeout(\r\n              function () {\r\n                this.index += 1;\r\n              }.bind(this),\r\n              3000\r\n            );\r\n          }\r\n          if (question.userAnswer === question.correct_answer) {\r\n            /* Set class on Button if user answered right, to celebrate right answer with animation joyfulButton */\r\n            e.target.classList.add(\"rightAnswer\");\r\n            /* Set rightAnswer on question to true, computed property can track a streak out of 20 questions */\r\n            this.questions[index].rightAnswer = true;\r\n          } else {\r\n            /* Mark users answer as wrong answer */\r\n            e.target.classList.add(\"wrongAnswer\");\r\n            this.questions[index].rightAnswer = false;\r\n            /* Show right Answer */\r\n            let correctAnswer = this.questions[index].correct_answer;\r\n            let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\r\n            allButtons.forEach(function (button) {\r\n              if (button.innerHTML === correctAnswer) {\r\n                button.classList.add(\"showRightAnswer\");\r\n              }\r\n            });\r\n          }\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchQuestions();\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n\r\n  form {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n  }\r\n  button {\r\n    font-size: 1.1rem;\r\n    box-sizing: border-box;\r\n    padding: 1rem;\r\n    margin: 0.5rem;\r\n    width: 40%;\r\n    background-color: rgba(100, 100, 100, 0.3);\r\n    border: none;\r\n    border-radius: 0.4rem;\r\n    box-shadow: 3px 5px 5px rgba(0, 0, 0, 0.2);\r\n  }\r\n  button:hover:enabled {\r\n    transform: scale(1.02);\r\n    box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14), 0 1px 7px 0 rgba(0, 0, 0, 0.12),\r\n      0 3px 1px -1px rgba(0, 0, 0, 0.2);\r\n    cursor: pointer;\r\n  }\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n  button:active:enabled {\r\n    transform: scale(1.05);\r\n  }\r\n  \r\n  @keyframes flashButton {\r\n    0% {\r\n      opacity: 1;\r\n      transform: scale(1.01);\r\n    }\r\n    50% {\r\n      opacity: 0.7;\r\n      transform: scale(1.02);\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  \r\n  button.clicked {\r\n    pointer-events: none;\r\n  }\r\n  \r\n  button.rightAnswer {\r\n    animation: flashButton;\r\n    animation-duration: 700ms;\r\n    animation-delay: 200ms;\r\n    animation-iteration-count: 3;\r\n    animation-timing-function: ease-in-out;\r\n    color: black;\r\n    background: linear-gradient(\r\n      210deg,\r\n      rgba(0, 178, 72, 0.25),\r\n      rgba(0, 178, 72, 0.5)\r\n    );\r\n  }\r\n  \r\n  button.wrongAnswer {\r\n    color: black;\r\n    background: linear-gradient(\r\n      210deg,\r\n      rgba(245, 0, 87, 0.25),\r\n      rgba(245, 0, 87, 0.5)\r\n    );\r\n  }\r\n  \r\n  button.showRightAnswer {\r\n    animation: flashButton;\r\n    animation-duration: 700ms;\r\n    animation-delay: 200ms;\r\n    animation-iteration-count: 2;\r\n    animation-timing-function: ease-in-out;\r\n    color: black;\r\n    background: linear-gradient(\r\n      210deg,\r\n      rgba(0, 178, 72, 0.25),\r\n      rgba(0, 178, 72, 0.5)\r\n    );\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}